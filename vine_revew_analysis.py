# -*- coding: utf-8 -*-
"""Vine_Revew_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/pat-tsai/Amazon_Vine_Analysis/blob/main/Vine_Revew_Analysis.ipynb
"""

import os
# Find the latest version of spark 2.0  from http://www-us.apache.org/dist/spark/ and enter as the spark version
# For example:
# spark_version = 'spark-3.0.0'
spark_version = 'spark-3.0.1'
os.environ['SPARK_VERSION']=spark_version

# Install Spark and Java
!apt-get update
!apt-get install openjdk-11-jdk-headless -qq > /dev/null
!wget -q http://www-us.apache.org/dist/spark/$SPARK_VERSION/$SPARK_VERSION-bin-hadoop2.7.tgz
!tar xf $SPARK_VERSION-bin-hadoop2.7.tgz
!pip install -q findspark

# Set Environment Variables
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
os.environ["SPARK_HOME"] = f"/content/{spark_version}-bin-hadoop2.7"

# Start a SparkSession
import findspark
findspark.init()

# Download the Postgres driver that will allow Spark to interact with Postgres.
!wget https://jdbc.postgresql.org/download/postgresql-42.2.16.jar

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("BigData-Challenge").config("spark.driver.extraClassPath","/content/postgresql-42.2.16.jar").getOrCreate()

"""### Load Amazon Data into Spark DataFrame"""

from pyspark import SparkFiles
url = "https://s3.amazonaws.com/amazon-reviews-pds/tsv/amazon_reviews_us_PC_v1_00.tsv.gz"
spark.sparkContext.addFile(url)
df = spark.read.option("encoding", "UTF-8").csv(SparkFiles.get(""), sep="\t", header=True, inferSchema=True)
df.show()

# filtering df to only display votes >20
filtered_df = df.filter("total_votes>20")
filtered_df.show()

filtered_df = filtered_df.filter("helpful_votes>(0.5 * total_votes)")
filtered_df.show()

is_vine = filtered_df.filter("vine=='Y'")
is_vine.show()

is_not_vine = filtered_df.filter("vine=='N'")
is_not_vine.show()

five_star_vine_count = is_vine.filter("star_rating=5").count()
total_vine_count = is_vine.count()
percentage_of_5_stars = five_star_vine_count/total_vine_count * 100
print(f'Total number of 5 star reviews: {five_star_vine_count}, Total number reviews: {total_vine_count}, Percentage of 5 stars: {percentage_of_5_stars}')

five_star_nvine_count = is_not_vine.filter("star_rating=5").count()
total_nvine_count = is_not_vine.count()
percentage_of_5_stars = five_star_nvine_count/total_nvine_count * 100
print(f'Total number of 5 star reviews: {five_star_nvine_count}, Total number reviews: {total_nvine_count}, Percentage of 5 stars: {percentage_of_5_stars}')

